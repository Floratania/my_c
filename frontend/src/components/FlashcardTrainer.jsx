import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { getFlashcards, updateProgress } from '../services/flashcards';
import api from '../services/api';
import './FlashcardTrainer.css';

const FlashcardTrainer = () => {
  const [flashcards, setFlashcards] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [flipped, setFlipped] = useState(false);
  const [error, setError] = useState('');
  const [skippedCards, setSkippedCards] = useState(new Set());
  const [selectedStatuses, setSelectedStatuses] = useState(['new', 'learning']);
  const [isTrainingStarted, setIsTrainingStarted] = useState(false);

  const statusOptions = [
    { value: 'new', label: 'üÜï –ù–æ–≤—ñ' },
    { value: 'learning', label: 'üß† –í—á—É' },
    { value: 'learned', label: '‚úÖ –í–∏–≤—á–µ–Ω—ñ' },
  ];

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–ø–æ–¥–æ–±–∞–Ω—å
  useEffect(() => {
    api.get('flashcards/user-preferences/')
      .then(res => {
        if (Array.isArray(res.data.selected_statuses)) {
          setSelectedStatuses(res.data.selected_statuses);
        }
      })
      .catch(() => {
        console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É–ø–æ–¥–æ–±–∞–Ω–Ω—è');
        setSelectedStatuses(['new', 'learning']);
      });
  }, []);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–ø–æ–¥–æ–±–∞–Ω—å
  const savePreferences = (statuses) => {
    api.post('flashcards/user-preferences/', {
      selected_statuses: statuses
    }).catch(() => {
      console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —É–ø–æ–¥–æ–±–∞–Ω–Ω—è');
    });
  };

  const handleCheckboxChange = (e) => {
    const { value, checked } = e.target;
    setSelectedStatuses(prev => {
      const updated = checked
        ? [...prev, value]
        : prev.filter(status => status !== value);

      savePreferences(updated);
      return updated;
    });
  };

  const loadFlashcards = () => {
    getFlashcards(selectedStatuses)
      .then(data => {
        if (!Array.isArray(data)) throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
        const shuffled = data.sort(() => Math.random() - 0.5);
        setFlashcards(shuffled);
        setSkippedCards(new Set());
        setCurrentIndex(0);
        setFlipped(false);
        setError('');
        setIsTrainingStarted(true);
      })
      .catch(() => {
        setError('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ä—Ç–∫–∏.');
      });
  };

  const handleFlip = () => setFlipped(!flipped);

  const handleNext = () => {
    const currentCard = flashcards[currentIndex];
    if (currentCard) {
      setSkippedCards(prev => {
        const updated = new Set(prev);
        updated.add(currentCard.id);
        return updated;
      });

      const remaining = flashcards.filter((card, idx) =>
        idx !== currentIndex && !skippedCards.has(card.id)
      );

      setFlashcards(remaining);
      setCurrentIndex(0);
      setFlipped(false);
    }
  };

  const handleProgress = (status) => {
    const currentCard = flashcards[currentIndex];
    if (!currentCard) return;

    updateProgress(currentCard.id, status)
      .then(() => {
        const newList = flashcards.filter((_, idx) => idx !== currentIndex);
        setFlashcards(newList);
        setCurrentIndex(0);
        setFlipped(false);
      })
      .catch(() => {
        setError('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–∞—Ä—Ç–∫–∏.');
      });
  };

  if (error) {
    return (
      <div>
        <p style={{ color: 'red', fontWeight: 'bold' }}>{error}</p>
        <p>
          <Link to="/wordsets">–û–±—Ä–∞—Ç–∏ –Ω–∞–±—ñ—Ä —Å–ª—ñ–≤</Link> –∞–±–æ —ñ–º–ø–æ—Ä—Ç—É–π—Ç–µ —Å–ª–æ–≤–Ω–∏–∫ –≤—Ä—É—á–Ω—É.
        </p>
      </div>
    );
  }

  if (!isTrainingStarted) {
    return (
      <div>
        <h2>–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ —Å–ª—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</h2>
        <form>
          {statusOptions.map(opt => (
            <label key={opt.value} style={{ display: 'block', marginBottom: '6px' }}>
              <input
                type="checkbox"
                value={opt.value}
                checked={selectedStatuses.includes(opt.value)}
                onChange={handleCheckboxChange}
              />
              {opt.label}
            </label>
          ))}
        </form>
        <button onClick={loadFlashcards} disabled={selectedStatuses.length === 0}>
          üöÄ –ü–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
        </button>
      </div>
    );
  }

  if (!flashcards.length) {
    return (
      <p>
        üéâ –£—Å—ñ —Å–ª–æ–≤–∞ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ! <Link to="/wordsets">–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –Ω–∞–±—ñ—Ä</Link>
      </p>
    );
  }

  const card = flashcards[currentIndex];

  return (
    <div className="trainer-container">
      <div className={`trainer-card ${flipped ? 'flipped' : ''}`} onClick={handleFlip}>
        <div className="front">{card.word}</div>
        <div className="back">{card.definition || '–Ω–µ–º–∞—î –ø–µ—Ä–µ–∫–ª–∞–¥—É'}</div>
      </div>

      <div className="trainer-controls">
        <button onClick={() => handleProgress('learning')}>üß† –í—á—É</button>
        <button onClick={() => handleProgress('learned')}>‚úÖ –í–∏–≤—á–∏–≤</button>
        <button onClick={handleNext}>‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏</button>
      </div>
    </div>
  );
};

export default FlashcardTrainer;
